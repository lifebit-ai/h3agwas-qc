plinkImage = 'banshee1221/h3agwas-plink'
rEngineImage = 'banshee1221/h3agwas-r'
swarmPort = '2376'

manifest {
    homePage = 'http://github.com/h3abionet/h3agwas'
    description = 'GWAS Pipeline for H3Africa'
    mainScript = 'plink-qc.nf'
}

aws {
    accessKey =''
    secretKey =''
    region    =''
}

params {

    // Directories
    work_dir                = "/$HOME/h3agwas"
    input_dir               = "${params.work_dir}/input"
    output_dir              = "${params.work_dir}/output"
    scripts                 = "${params.work_dir}/scripts"

    // Data
    input_pat            = "*"
    high_ld_regions_fname = ""
    sexinfo_available    = "TRUE"
    cut_het_high         = "0.343"
    cut_het_low          = "0.254"
    cut_miss             = "0.05"
    cut_diff_miss        = "0.05"
    cut_maf              = "0.01"
    cut_mind             = "0.01"
    cut_geno             = "0.01"
    cut_hwe              = "0.008"
    pi_hat               = "0.04"
    plink_process_memory = "750MB"
    other_process_memory = "750MB"
    max_plink_cores      = "4"
    accessKey            = ""
    secretKey            = ""
    region               = ""
    AMI                  = "ami-9dc5a68a"
    instanceType         = "subnet-8ee22c7"
    bootStorageSize      = "20GB"
    maxInstances         = "5"

}
profiles {

    // For execution on a local machine, no containerization. -- Default
    standard {
        process.executor = 'local'
    }

    // For execution on a PBS scheduler, no containerization.
    pbs {
        process.executor = 'pbs'
        process.queue = 'long'
    }

    // For execution on a PBS scheduler with containerization.
    pbsDocker {

        process.executor = 'pbs'
        process.queue = 'long'
        process.memory= '10GB'

        process.$removeDuplicateSNPs.container = "$plinkImage"
        process.$identifyIndivDiscSexinfo.container = "$plinkImage"
        process.$calculateSampleMissing.container = "$plinkImage"
        process.$calculateSampleHetrozygosity.container = "$plinkImage"
        process.$pruneForIBD.container = "$plinkImage"
        process.$removeQCIndivs.container = "$plinkImage"
        process.$calculateMaf.container = "$plinkImage"
        process.$calculateSnpMissigness.container = "$plinkImage"
        process.$calculateSnpSkewStatus.container = "$plinkImage"
        process.$removeQCPhase1.container = "$plinkImage"
        process.$computePhase0.container = "$plinkImage"

        process.$generateMissHetPlot.container = "$rEngineImage"
        process.$generateMafPlot.container = "$rEngineImage"
        process.$generateSnpMissingnessPlot.container = "$rEngineImage"
        process.$generateDifferentialMissingnessPlot.container = "$rEngineImage"
        process.$generateHwePlot.container = "$rEngineImage"

        docker.remove = true
        docker.runOptions = '--rm'
        docker.registry = 'quay.io'
        docker.enabled = true
        docker.temp = 'auto'
        docker.fixOwnership = true

    }

    // Execute pipeline with Docker locally
    docker {
        process.$removeDuplicateSNPs.container = "$plinkImage"
        process.$identifyIndivDiscSexinfo.container = "$plinkImage"
        process.$calculateSampleMissing.container = "$plinkImage"
        process.$calculateSampleHetrozygosity.container = "$plinkImage"
        process.$pruneForIBD.container = "$plinkImage"
        process.$removeQCIndivs.container = "$plinkImage"
        process.$calculateMaf.container = "$plinkImage"
        process.$calculateSnpMissigness.container = "$plinkImage"
        process.$calculateSnpSkewStatus.container = "$plinkImage"
        process.$removeQCPhase1.container = "$plinkImage"
        process.$computePhase0.container = "$plinkImage"

        process.$generateMissHetPlot.container = "$rEngineImage"
        process.$generateMafPlot.container = "$rEngineImage"
        process.$generateSnpMissingnessPlot.container = "$rEngineImage"
        process.$generateDifferentialMissingnessPlot.container = "$rEngineImage"
        process.$generateHwePlot.container = "$rEngineImage"

        docker.remove = true
        docker.runOptions = '--rm'
	      docker.registry = 'quay.io'
        docker.enabled = true
        docker.temp = 'auto'
        docker.process.executor = 'local'
        docker.fixOwnership = true
    }

    dockerpbs {
        process.executor = 'pbs'
        process.$removeDuplicateSNPs.container = "$plinkImage"
        process.$identifyIndivDiscSexinfo.container = "$plinkImage"
        process.$calculateSampleMissing.container = "$plinkImage"
        process.$calculateSampleHetrozygosity.container = "$plinkImage"
        process.$pruneForIBD.container = "$plinkImage"
        process.$removeQCIndivs.container = "$plinkImage"
        process.$calculateMaf.container = "$plinkImage"
        process.$calculateSnpMissigness.container = "$plinkImage"
        process.$calculateSnpSkewStatus.container = "$plinkImage"
        process.$removeQCPhase1.container = "$plinkImage"
        process.$computePhase0.container = "$plinkImage"

        process.$generateMissHetPlot.container = "$rEngineImage"
        process.$generateMafPlot.container = "$rEngineImage"
        process.$generateSnpMissingnessPlot.container = "$rEngineImage"
        process.$generateDifferentialMissingnessPlot.container = "$rEngineImage"
        process.$generateHwePlot.container = "$rEngineImage"

        docker.remove = true
        docker.runOptions = '--rm'
	      docker.registry = 'quay.io'
        docker.enabled = true
        docker.temp = 'auto'
        docker.process.executor = 'local'
        docker.fixOwnership = true
    }


    // Execute pipeline with Docker Swarm setup
    dockerSwarm {

        process.$removeDuplicateSNPs.container = "$plinkImage"
        process.$identifyIndivDiscSexinfo.container = "$plinkImage"
        process.$calculateSampleMissing.container = "$plinkImage"
        process.$calculateSampleHetrozygosity.container = "$plinkImage"
        process.$pruneForIBD.container = "$plinkImage"
        process.$removeQCIndivs.container = "$plinkImage"
        process.$calculateMaf.container = "$plinkImage"
        process.$calculateSnpMissigness.container = "$plinkImage"
        process.$calculateSnpSkewStatus.container = "$plinkImage"
        process.$removeQCPhase1.container = "$plinkImage"
        process.$computePhase0.container = "$plinkImage"

        process.$generateMissHetPlot.container = "$rEngineImage"
        process.$generateMafPlot.container = "$rEngineImage"
        process.$generateSnpMissingnessPlot.container = "$rEngineImage"
        process.$generateDifferentialMissingnessPlot.container = "$rEngineImage"
        process.$generateHwePlot.container = "$rEngineImage"

        docker.registry = 'quay.io'
        docker.remove = true
        docker.runOptions = '--rm'
        docker.enabled = true
        docker.temp = 'auto'
        docker.process.executor = 'local'
        docker.fixOwnership = true
        docker.engineOptions = "-H :$swarmPort"
    }

    cloud {

            imageId = "ami-9dc5a68a"      // specify your AMI id here
            instanceType = "subnet-8ee22c7"
            subnetId = "null"
            bootStorageSize = "20GB"     // Size of disk for images spawned
//          instanceSotrageMount = ""   // Set a common mount point for images
//          instanceStorageDevice = ""  // Set a common block device for images
            autoscale {
               enabled = true
               maxInstances = 5
               terminateWhenIdle = true
             }

    }

}


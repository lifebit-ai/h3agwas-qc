// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

py3Image = "quay.io/h3abionet_org/py3plink"
gemmaImage="quay.io/h3abionet_org/py3plink"
latexImage="quay.io/h3abionet_org/h3agwas-texlive"
py2fastImage="quay.io/h3abionet_org/py2fastlmm"
MetaAnImage="quay.io/h3abionet_org/py3metagwas"
swarmPort = '2376'
queue = 'batch'

manifest {
    homePage = 'http://github.com/h3abionet/h3agwas'
    description = 'GWAS Pipeline for H3Africa'
    mainScript = 'main.nf'
}


profile {
    cloud_aws {
aws {
    accessKey =''
    secretKey =''
    region    ='eu-west-1'
}

cloud {
    imageId = "ami-710b9108"      // specify your AMI id here
    instanceType = "m4.xlarge"
    subnetId = "null"
    sharedStorageId   = "null"
    sharedStorageMount = "/mnt/shared"
    bootStorageSize = "20GB"     // Size of disk for images spawned
    //   instanceStorageMount = ""   // Set a common mount point for images
    //   instanceStorageDevice = ""  // Set a common block device for images
    autoscale {
        enabled = true
        maxInstances = 1
        terminateWhenIdle = true
    }

}
    }
}


params {

    // Max resources per task
    max_memory = 128.GB
    max_cpus = 16
    max_time = 120.h

    // Directories
    work_dir                = ""
    input_dir               = ""
    output_dir              = "results"
    scripts                 = "scripts"
    output                  = "out"


    max_forks            = 95     
    // Data
    input_pat            = ""


    high_ld_regions_fname = ""
    sexinfo_available    = true
    cut_het_high         = 0.343
    cut_het_low           = 0.15
    cut_diff_miss         = "0.05"
    cut_maf                = "0.01"
    cut_mind              = "0.02"
    cut_geno              = 0.01
    cut_hwe               = 0.008
    case_control         = "${params.input_dir}/sample.phe"
    case_control_col     = "PHE"


    phenotype = 0
    pheno_col = "all"
    batch = 0
    batch_col = 0

    samplesize           = 0  // How many individuals in each genotype report 0=ALL
    strandreport         =""
    manifest             =  ""
    idpat                =  0  // or "(\\w+)-DNA_(\\w+)_.*" or ".*_(.*)"


    // Needed for topbottom.nf -- uncomment and put in details
    // reference        = ""
    // output_align     = ""
    // samplesheet      = ""
    // chipdescription  = ""  

    accessKey            = ""
    secretKey            = ""
    region               = "eu-west-1"
    AMI                  = "ami-710b9108"
    instanceType         = "m4.xlarge"
    bootStorageSize      = "20GB"
    maxInstances         = "1"

    plink_mem_req        = "750MB"
    other_mem_req        = "750MB"
    big_time             = '1000h'
    sharedStorageMount   = "/mnt/shared"
    max_plink_cores      = check_max(4, 'cpus')


}

docker.runOptions = "-u \$(id -u):\$(id -g)"
profiles {

    // For execution on a local machine, no containerization. -- Default
    standard {
        docker.enabled     = true
    }
    test {
        docker.enabled     = true
        includeConfig 'conf/test.config'
    }
    // DON'T ever use underscores in profile names. h3abionet assoc pipeline fails because of this.
    smalltest {
        docker.enabled     = true
        includeConfig 'conf/smalltest.config'
    }
slurm {
process.executor = 'slurm'
process.queue = queue
}



    // Execute pipeline with Docker locally
    docker {
        process.executor = 'local'
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
        docker.process.executor = 'local'
    }


    // Execute pipeline with Docker Swarm setup
    dockerSwarm {
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
        docker.process.executor = 'local'
        docker.engineOptions = "-H :$swarmPort"
    }

    // For execution on a PBS scheduler, no containerization.
    pbs {
        process.executor = 'pbs'
        process.queue = queue
    }


    // For execution on a PBS scheduler with containerization.
    pbsDocker {

        process.executor = 'pbs'
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
    }


    // For execution on a SLURM scheduler, no containerization.
    slurm {
        process.executor = 'slurm'
        process.queue = queue
    }


    // For execution on a PBS scheduler with containerisation.
    slurmDocker {
        process.executor = 'slurm'
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
    }


    singularity.cacheDir = "${HOME}/.singularity"

    singularity {
        singularity.autoMounts = true
        singularity.enabled = true
        process.executor = 'local'
     }

    // For execution on a SLURM scheduler with singularity
    slurmSingularity {

        process.executor = 'slurm'
        singularity.autoMounts = true
        singularity.enabled = true
        singularity.runOption = "--cleanenv"
        process.queue = queue

    }

    slurmDocker {
        process.executor = 'slurm'
        process.queue = queue
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true

    }
    // For execution on a PBS scheduler, no containerization.
    pbs {
        process.executor = 'pbs'
        process.queue = queue
    }


    // For execution on a PBS scheduler with containerization.
    pbsDocker {

        process.executor = 'pbs'
        docker.remove      = true
        docker.runOptions  = '--rm'
        docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
  } 

}




process {
    container = py3Image

    withLabel:bigMem {
      memory = '8GB'
    }

    withLabel: gemma {
          container = gemmaImage
    }

    withLabel: latex {
          container = latexImage
    }
    withLabel: metaanalyse {
          container = MetaAnImage
    }
    withLabel: py2fast {
          container = py2fastImage
    }


}

//timeline { 
//    enabled=true
//    file = "nextflow_reports/timeline.html"
//}

//report {
//    enabled = true
//    file = "nextflow_reports/report.html"
//}

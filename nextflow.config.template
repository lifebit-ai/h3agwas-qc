plinkImage="h3abionet_org/h3agwas-plink"
gemmaImage="h3abionet_org/h3agwas-gemma"
bioperlImage="bioperl/bioperl"
rEngineImage="h3abionet_org/h3agwas-r"
latexImage="h3abionet_org/h3agwas-texlive"
swarmPort = '2376'

manifest {
    homePage = 'http://github.com/h3abionet/h3agwas'
    description = 'GWAS Pipeline for H3Africa'
    mainScript = 'plink-qc.nf'
}


aws {
    accessKey =''
    secretKey =''
    region    ='eu-west-1'
}

    cloud {

            imageId = "ami-9ca7b2fa"      // specify your AMI id here
            instanceType = "m4.xlarge"
            subnetId = "null"
            sharedStorageId   = "null"
   	     sharedStorageMount = "/mnt/shared"
            bootStorageSize = "20GB"     // Size of disk for images spawned
//          instanceStorageMount = ""   // Set a common mount point for images
//          instanceStorageDevice = ""  // Set a common block device for images
            autoscale {
               enabled = true
               maxInstances = 1
               terminateWhenIdle = true
             }

    }


params {

    // Directories
    work_dir                = "/$PWD"
    input_dir               = "${params.work_dir}/input"
    output_dir              = "${params.work_dir}/output"
    scripts                 = "${params.work_dir}/scripts"

    // Data
    input_pat            = "sampleA"
    high_ld_regions_fname = ""
    sexinfo_available    = "TRUE"
    cut_het_high         = "0.343"
    cut_het_low          = "0.254"
    cut_diff_miss        = "0.05"
    cut_maf              = "0.01"
    cut_mind             = "0.01"
    cut_geno             = "0.01"
    cut_hwe              = "0.008"
    pi_hat               = "0.04"
    topbot               = "false"
    fam                  = ""
    reference            = "/data/aux/Homo_sapiens.GRCh37.75.dna.toplevel.fa"
    dbsnp_all_vcf        = "/data/aux/All_20170403.vcf.gz"
    manifest             = "/data/aux/HumanOmni5-4-v1-0-D.csv"
    plink_process_memory = "750MB"
    other_process_memory = "750MB"
    sharedStorageMount   = "/mnt/shared"
    max_plink_cores      = "4"
    accessKey            = ""
    secretKey            = ""
    region               = "eu-west-1"
    AMI                  = "ami-9ca7b2fa"
    instanceType         = "m4.xlarge"
    bootStorageSize      = "20GB"
    maxInstances         = "1"

}
profiles {

    // For execution on a local machine, no containerization. -- Default
    standard {
        process.executor = 'local'
    }

    // For execution on a PBS scheduler, no containerization.
    pbs {
        process.executor = 'pbs'
        process.queue = 'null'
    }

    // For execution on a PBS scheduler with containerization.
    pbsDocker {

        process.executor = 'pbs'
        process.$removeDuplicateSNPs.container = "$plinkImage"
        process.$identifyIndivDiscSexinfo.container = "$plinkImage"
        process.$calculateSampleMissing.container = "$plinkImage"
        process.$calculateSampleHetrozygosity.container = "$plinkImage"
        process.$compPCA.container = "$plinkImage"
        process.$pruneForIBD.container = "$plinkImage"
        process.$removeQCIndivs.container = "$plinkImage"
        process.$calculateMaf.container = "$plinkImage"
        process.$calculateSnpMissingness.container = "$plinkImage"
        process.$calculateSnpSkewStatus.container = "$plinkImage"
        process.$removeQCPhase1.container = "$plinkImage"
        process.$computePhase0.container = "$plinkImage"
        process.$drawPCA.container = "$rEngineImage"
        process.$generateIndivMissingnessPlot.container="$rEngineImage"
        process.$generateMissHetPlot.container = "$rEngineImage"
        process.$generateMafPlot.container = "$rEngineImage"
        process.$generateSnpMissingnessPlot.container = "$rEngineImage"
        process.$generateDifferentialMissingnessPlot.container = "$rEngineImage"
        process.$generateHwePlot.container = "$rEngineImage"
        process.$produceReports.container  ="$latexImage"
        process.$lgen2ped.container        = "$plinkImage"
        process.$createBed.container      = "$plinkImage"
        process.$lgen2ped.container        = "$plinkImage"
        process.$flip.container            = "$bioperlImage"
        process.$computePCA.container      = "$plinkImage"
        process.$computeTest.container     = "$gemmaImage"
        process.$annotation.container      = "$bioperlImage"

        docker.remove      = true
        docker.runOptions  = '--rm'
	      docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true

    }

    // Execute pipeline with Docker locally
    docker {
        process.$removeDuplicateSNPs.container = "$plinkImage"
        process.$identifyIndivDiscSexinfo.container = "$plinkImage"
        process.$calculateSampleMissing.container = "$plinkImage"
        process.$calculateSampleHetrozygosity.container = "$plinkImage"
        process.$compPCA.container = "$plinkImage"
        process.$pruneForIBD.container = "$plinkImage"
        process.$removeQCIndivs.container = "$plinkImage"
        process.$calculateMaf.container = "$plinkImage"
        process.$calculateSnpMissingness.container = "$plinkImage"
        process.$calculateSnpSkewStatus.container = "$plinkImage"
        process.$removeQCPhase1.container = "$plinkImage"
        process.$computePhase0.container = "$plinkImage"
        process.$drawPCA.container = "$rEngineImage"
        process.$generateIndivMissingnessPlot.container="$rEngineImage"
        process.$generateMissHetPlot.container = "$rEngineImage"
        process.$generateMafPlot.container = "$rEngineImage"
        process.$generateSnpMissingnessPlot.container = "$rEngineImage"
        process.$generateDifferentialMissingnessPlot.container = "$rEngineImage"
        process.$generateHwePlot.container = "$rEngineImage"
        process.$produceReports.container  ="$latexImage"
        process.$lgen2ped.container        = "$plinkImage"
        process.$createBed.container      = "$plinkImage"
        process.$lgen2ped.container        = "$plinkImage"
        process.$flip.container            = "$bioperlImage"
        process.$computePCA.container      = "$plinkImage"
        process.$computeTest.container     = "$gemmaImage"
        process.$annotation.container      = "$bioperlImage"

        docker.remove      = true
        docker.runOptions  = '--rm'
	      docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
        docker.process.executor = 'local'
    }

    dockerpbs {
        process.executor = 'pbs'
        process.$removeDuplicateSNPs.container = "$plinkImage"
        process.$identifyIndivDiscSexinfo.container = "$plinkImage"
        process.$calculateSampleMissing.container = "$plinkImage"
        process.$calculateSampleHetrozygosity.container = "$plinkImage"
        process.$compPCA.container = "$plinkImage"
        process.$pruneForIBD.container = "$plinkImage"
        process.$removeQCIndivs.container = "$plinkImage"
        process.$calculateMaf.container = "$plinkImage"
        process.$calculateSnpMissingness.container = "$plinkImage"
        process.$calculateSnpSkewStatus.container = "$plinkImage"
        process.$removeQCPhase1.container = "$plinkImage"
        process.$computePhase0.container = "$plinkImage"
        process.$drawPCA.container = "$rEngineImage"
        process.$generateIndivMissingnessPlot.container="$rEngineImage"
        process.$generateMissHetPlot.container = "$rEngineImage"
        process.$generateMafPlot.container = "$rEngineImage"
        process.$generateSnpMissingnessPlot.container = "$rEngineImage"
        process.$generateDifferentialMissingnessPlot.container = "$rEngineImage"
        process.$generateHwePlot.container = "$rEngineImage"
        process.$produceReports.container  ="$latexImage"
        process.$lgen2ped.container        = "$plinkImage"
        process.$createBed.container      = "$plinkImage"
        process.$lgen2ped.container        = "$plinkImage"
        process.$flip.container            = "$bioperlImage"
        process.$computePCA.container      = "$plinkImage"
        process.$computeTest.container     = "$gemmaImage"
        process.$annotation.container      = "$bioperlImage"

        docker.remove      = true
        docker.runOptions  = '--rm'
	      docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
        docker.process.executor = 'local'
        docker.fixOwnership = true
    }


    // Execute pipeline with Docker Swarm setup
    dockerSwarm {

        process.$removeDuplicateSNPs.container = "$plinkImage"
        process.$identifyIndivDiscSexinfo.container = "$plinkImage"
        process.$calculateSampleMissing.container = "$plinkImage"
        process.$calculateSampleHetrozygosity.container = "$plinkImage"
        process.$compPCA.container = "$plinkImage"
        process.$pruneForIBD.container = "$plinkImage"
        process.$removeQCIndivs.container = "$plinkImage"
        process.$calculateMaf.container = "$plinkImage"
        process.$calculateSnpMissingness.container = "$plinkImage"
        process.$calculateSnpSkewStatus.container = "$plinkImage"
        process.$removeQCPhase1.container = "$plinkImage"
        process.$computePhase0.container = "$plinkImage"
        process.$drawPCA.container = "$rEngineImage"
        process.$generateIndivMissingnessPlot.container="$rEngineImage"
        process.$generateMissHetPlot.container = "$rEngineImage"
        process.$generateMafPlot.container = "$rEngineImage"
        process.$generateSnpMissingnessPlot.container = "$rEngineImage"
        process.$generateDifferentialMissingnessPlot.container = "$rEngineImage"
        process.$generateHwePlot.container = "$rEngineImage"
        process.$produceReports.container  ="$latexImage"
        process.$lgen2ped.container        = "$plinkImage"
        process.$createBed.container      = "$plinkImage"
        process.$lgen2ped.container        = "$plinkImage"
        process.$flip.container            = "$bioperlImage"
        process.$computePCA.container      = "$plinkImage"
        process.$computeTest.container     = "$gemmaImage"
        process.$annotation.container      = "$bioperlImage"

        docker.remove      = true
        docker.runOptions  = '--rm'
	      docker.registry    = 'quay.io'
        docker.enabled     = true
        docker.temp        = 'auto'
        docker.fixOwnership= true
        docker.process.executor = 'local'
        docker.engineOptions = "-H :$swarmPort"
    }



}

